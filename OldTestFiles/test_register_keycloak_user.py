import unittest
import requests
from xeger import Xeger
import sys
from nose import run
from htmloutput.htmloutput import HtmlOutput
import os
from time import gmtime, strftime
import orion_platform_test_library.generator_excel_format_test_report as excel_report
import orion_platform_test_library.string_generator as generator


# if we need self-definition report in format excel, let self_definition_report equal True
# # attention: when the value is True, all of test case will be passed, although some case shall be fail,
# # so, all error of the fail case will be write into self-definition report
# # if you want all of the case test report( pass and fail ), let self_definition_report equal False
self_definition_report = False

class TestRegisterKeycloakUser(unittest.TestCase):
    report_data = []

    def setUp(self):
        # url
        self.url = "http://192.168.88.216:8080/orionboot/keycloak_user"

        # test data auto-generated by generator
        email_option_number = 20
        number_of_each_option = 2
        self.email_address = []
        for index_option in range(email_option_number):
            for index in range(number_of_each_option):
                email_address = (generator.email_generator(index_option)[1], generator.email_generator(index_option)[2])
                self.email_address.append(email_address)

        password_option_number = 5
        password_number_of_each_option = int((email_option_number * number_of_each_option) / password_option_number)
        self.password = []
        for index_option in range(password_option_number):
            for index in range(password_number_of_each_option):
                pass_word = (generator.pass_generator(index_option)[1], generator.pass_generator(index_option)[2])
                self.password.append(pass_word)

        # test data manual
        # # test data: email address
        self.valid_email_address = Xeger(limit=8).xeger(r'test[.][a-z]+[.][0-9]+@[a-z]{4}[.]com')
        self.invalid_email_address = []
        self.invalid_email_address.append(Xeger(limit=6).xeger(r'[a-z]+[0-9]+[.][A-Z]+[^@][a-z]{3}[.]com'))
        self.invalid_email_address.append(Xeger(limit=6).xeger(r'[~@#$%^&*()_ ?/.,]+@[a-z]{3}[.]com'))
        self.invalid_email_address.append(Xeger(limit=6).xeger(r'[a-z]+[0-9]+[.][A-Z]+@[~@#$%^&*()_+ ?/.,]+[.]com'))
        self.invalid_email_address.append(Xeger(limit=6).xeger(r'[a-z]+[0-9]+[.][A-Z]+@[a-z]{3}[.][~@#$%^&*()_ ?/.,]+'))

        # # # test data: password
        # # self.valid_password = Xeger(limit=10).xeger(r'[a-z]{4}[0-9]{4}')
        self.valid_password = 'a123456'
        self.invalid_password = []
        self.invalid_password.append(Xeger(limit=5).xeger(r'[a-z0-9]+'))
        self.invalid_password.append(Xeger(limit=10).xeger(r'[a-z]{7}'))
        self.invalid_password.append(Xeger(limit=10).xeger(r'[0-9]{7}'))
        self.invalid_password.append(Xeger(limit=10).xeger(r'[~!@#$%&*()";:/.,?><]{8}'))

        # # test data: name
        self.first_name = Xeger(limit=5).xeger(r'test[.][a-z]')
        self.last_name = Xeger(limit=5).xeger(r'test[.][a-z]')

        # data of the test report
        # self.report_header = ['Test Case#', 'Test Title', 'Test Summary', 'Test Steps', 'Test Data', 'Expected Result',
        #                       'Tested Result', 'Status', 'Note']
        self.report_header = ['Test Steps', 'Test Data', 'Expected Result', 'Tested Result', 'Note']
        # get class name as report and sheet name, because class name is API test
        self.report_name = self.__class__.__name__
        self.report_sheet_name = self.__class__.__name__

    # @unittest.skip(" to open ")
    def test_register_keycloak_with_valid_arguments(self):
        headers = {
            'Content-Type': "application/json"
        }
        for index in range(len(self.email_address)):
            payload = {
                "email": self.email_address[index][0],
                "firstName": self.first_name,
                "lastName": self.last_name,
                "referCode": "JvMZNma9",
                "provinceId": 1,
                "countryId": 1,
                "credentials": [
                    {
                        "value": self.password[index][0]
                    }
                ]
            }
            # print("email_address: ", self.email_address[index][0])
            # print("password: ", self.password[index][1])
            response = requests.post(self.url, json=payload, headers=headers)
            # print(response.text)
            # with open('./user_register_information.json', 'w') as fp:
            #     fp.write(response.text)

            # self.assertEqual(response.json()["userName"], self.valid_email_address)

            if self_definition_report:
                # for test report
                note = []
                expection_result = self.email_address[index][0]
                try:
                    test_result = response.json()["userName"]
                except Exception as et:
                    note.append(et)
                test_data = str(payload)
                # status = 'pass'
                try:
                    self.assertEqual(test_result, expection_result)
                except AssertionError as e:
                    # status = 'unknown'
                    note.append(response.text)

                test_case_data = [sys._getframe().f_code.co_name + "()", test_data, expection_result, test_result,
                                  str(note)]
                self.report_data.append(test_case_data)
            else:
                expection_result = self.email_address[index][0]
                test_result = response.json()["userName"]
                self.assertEqual(test_result, expection_result)

    # @unittest.skip(" to open")
    def test_register_keycloak_with_exsiting_user(self):
        headers = {
            'Content-Type': "application/json"
        }
        payload = {
            "email": 'mikesiwer01@gmail.com',
            "firstName": 'mike',
            "lastName": 'li',
            "referCode": "",
            "provinceId": 1,
            "countryId": 1,
            "credentials": [
                {
                    "value": 'a123456'
                }
            ]

        }

        response = requests.post(self.url, json=payload, headers=headers)
        # print(response.json())
        # self.assertEqual(response.json()["message"], "User conflict.")

        if self_definition_report:
            # for test report
            expection_result = "User conflict."
            test_result = response.json()["message"]
            test_data = str(payload)
            status = 'pass'
            note = 'None'
            try:
                self.assertEqual(test_result, expection_result)
            except AssertionError as e:
                # status = 'unknown'
                note = response.text

            test_case_data = [sys._getframe().f_code.co_name + "()", test_data, expection_result, test_result, note]
            self.report_data.append(test_case_data)
        else:
            expection_result = "User conflict."
            test_result = response.json()["message"]
            self.assertEqual(test_result, expection_result)

    @unittest.skip(" invalid email address is Not need to test here, because it be controlled by front-end ")
    def test_register_keycloak_with_invalid_email_address(self):
        headers = {
            'Content-Type': "application/json"
        }

        for index in range(len(self.invalid_email_address)):
            payload = {
                "email": self.invalid_email_address[index],
                "firstName": self.first_name,
                "lastName": self.last_name,
                "credentials": [
                    {
                        "value": self.valid_email_address
                    }
                ]

            }
            response = requests.post(self.url, json=payload, headers=headers)
            # print(response.text)
            # print(self.invalid_email_format[index])
            # self.assertIn("user.email.not.valid", response.json()["Message"])

            # for test report
            if self_definition_report:
                expection_result = "user.email.not.valid"
                test_result = response.json()["Message"]
                test_data = str(payload)
                status = 'pass'
                note = 'None'
                try:
                    self.assertEqual(test_result, expection_result)
                except AssertionError as e:
                    # status = 'unknown'
                    note = response.text

                test_case_data = [sys._getframe().f_code.co_name + "()", test_data, expection_result, test_result, note]
                self.report_data.append(test_case_data)
            else:
                expection_result = "user.email.not.valid"
                test_result = response.json()["Message"]
                self.assertEqual(test_result, expection_result)

    @unittest.skip(" invalid password is Not need to test, because it be controlled by front-end ")
    def test_register_keycloak_with_invalid_password(self):
        headers = {
            'Content-Type': "application/json"
        }

        for index in range(len(self.invalid_password)):
            payload = {
                "email": self.valid_email_address,
                "firstName": self.first_name,
                "lastName": self.last_name,
                "credentials": [
                    {
                        "value": self.invalid_password[index]
                    }
                ]
            }
            response = requests.post(self.url, json=payload, headers=headers)
            print(response.text)
            # print(self.invalid_password_format[index])
            # self.assertIn("user.password.not.valid", response.json()["Message"])

            # for test report
            if self_definition_report:
                expection_result = "user.email.not.valid"
                test_result = response.json()["Message"]
                test_data = str(payload)
                status = 'pass'
                note = 'None'
                try:
                    self.assertIn("user.password.not.valid", response.json()["Message"])
                except AssertionError as e:
                    # status = 'unknown'
                    note = response.text

                test_case_data = [sys._getframe().f_code.co_name + "()", test_data, expection_result, test_result, note]
                self.report_data.append(test_case_data)
            else:
                expection_result = "user.email.not.valid"
                test_result = response.json()["Message"]
                self.assertEqual(test_result, expection_result)

    @unittest.skip(" Not need to test null first name here, because it be controlled by front-end ")
    def test_register_keycloak_without_first_name(self):
        headers = {
            'Content-Type': "application/json"
        }
        payload = {
            "email": self.valid_email_address,
            "firstName": None,
            "lastName": self.last_name,
            "credentials": [
                {
                    "value": "a123456"
                }
            ]
        }
        response = requests.post(self.url, json=payload, headers=headers)
        print(response.json())
        # self.assertIn("first name is not valid", response.json()["Message"])

        # for test report
        if self_definition_report:
            expection_result = "user.email.not.valid"
            test_result = response.json()["Message"]
            test_data = str(payload)
            status = 'pass'
            note = 'None'
            try:
                self.assertIn("first name is None", response.json()["Message"])
            except AssertionError as e:
                # status = 'unknown'
                note = response.text

            test_case_data = [sys._getframe().f_code.co_name + "()", test_data, expection_result, test_result, note]
            self.report_data.append(test_case_data)
        else:
            expection_result = "user.email.not.valid"
            test_result = response.json()["Message"]
            self.assertEqual(test_result, expection_result)

        self.assertIn("first name is None", response.json()["Message"])

    @unittest.skip(" Not need to test null last name here, because it be controlled by front-end ")
    def test_register_keycloak_without_last_name(self):
        headers = {
            'Content-Type': "application/json"
        }
        payload = {
            "email": self.valid_email_address,
            "firstName": self.first_name,
            "lastName": None,
            "credentials": [
                {
                    "value": "a123456"
                }
            ]
        }

        response = requests.post(self.url, json=payload, headers=headers)
        # print(response.json())
        # self.assertIn("last name is not valid", response.json()["Message"])


        # for test report
        if self_definition_report:
            expection_result = "user.email.not.valid"
            test_result = response.json()["Message"]
            test_data = str(payload)
            status = 'pass'
            note = 'None'
            try:
                self.assertIn("last name is None", response.json()["Message"])
            except AssertionError as e:
                # status = 'unknown'
                note = response.text

            test_case_data = [sys._getframe().f_code.co_name + "()", test_data, expection_result, test_result, note]
            self.report_data.append(test_case_data)
        else:
            expection_result = "user.email.not.valid"
            test_result = response.json()["Message"]
            self.assertIn(expection_result, test_result)

    def tearDown(self):
        if self_definition_report:
            excel_report.generate_excel_format_test_report(self.report_header, self.report_data, self.report_name,
                                                       self.report_sheet_name)

# for generate normal report in html format
if self_definition_report == False:
    # for generate normal report in html format
    path = os.path.dirname(__file__)
    outfile = os.path.join(path, __file__)
    report_file_name = '--html-out-file=./test_normal_report_format_html/' + __file__[36:-3] + strftime(
        "-%Y-%m-%d %H-%M",
        gmtime()) + '-report.html'
    run(argv=['nosetest', '-v', '--with-html-output', report_file_name, outfile],
        plugins=[HtmlOutput()])
    # report_file_name = __file__ + strftime("-%Y-%m-%d %H-%M", gmtime()) + '-report.html'
    # run(argv=['nosetest', '-v', '--with-html-output', '--html-out-file=' + report_file_name, outfile],
    #     plugins=[HtmlOutput()])
    # outfile = os.path.join(path, 'test_register_keycloak_user.py')
    # report_path_html = './test_normal_report_format_html/'
    # report_file_name = report_path_html + __file__ + strftime("-%Y-%m-%d %H-%M", gmtime()) + '-report.html'
    # run(argv=['nosetest', '-v', '--with-html-output', '--html-out-file=report.html', outfile], plugins=[HtmlOutput()])

if __name__ == '__main__':
    unittest.main()
